function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useCallback, useRef } from 'react';
import { parse as parseQS, stringify as stringifyQS } from 'query-string';
import { SPECTACLE_MODES } from '../utils/constants';

var useModes = function useModes() {
  var mode = useRef(modeKeyForSearchParam(parseQS(window.location.search, {
    parseBooleans: true
  })));
  var toggleMode = useCallback(function (args) {
    var newMode = args.newMode,
        senderSlideIndex = args.senderSlideIndex,
        e = args.e;
    e === null || e === void 0 ? void 0 : e.preventDefault();
    var stepIndex = 0;
    var slideIndex = senderSlideIndex || '';
    var searchParams = parseQS(window.location.search, {
      parseBooleans: true
    });

    if (!slideIndex) {
      slideIndex = searchParams.slideIndex;
      stepIndex = searchParams.stepIndex;
    }

    if (mode.current === newMode) {
      window.location.search = stringifyQS({
        slideIndex: slideIndex,
        stepIndex: stepIndex
      });
      return;
    }

    mode.current = newMode;
    window.location.search = stringifyQS(_objectSpread({
      slideIndex: slideIndex,
      stepIndex: stepIndex
    }, modeSearchParamForKey(newMode)));
  }, [mode]);
  var getCurrentMode = useCallback(function () {
    return mode.current;
  }, []);
  return {
    toggleMode: toggleMode,
    getCurrentMode: getCurrentMode
  };
};

function modeSearchParamForKey(key) {
  if (key === SPECTACLE_MODES.PRESENTER_MODE) {
    return {
      presenterMode: true
    };
  } else if (key === SPECTACLE_MODES.OVERVIEW_MODE) {
    return {
      overviewMode: true
    };
  } else if (key === SPECTACLE_MODES.PRINT_MODE) {
    return {
      printMode: true
    };
  } else if (key === SPECTACLE_MODES.EXPORT_MODE) {
    return {
      exportMode: true
    };
  }

  return {};
}

function modeKeyForSearchParam(_ref) {
  var presenterMode = _ref.presenterMode,
      overviewMode = _ref.overviewMode,
      printMode = _ref.printMode,
      exportMode = _ref.exportMode;

  if (presenterMode) {
    return SPECTACLE_MODES.PRESENTER_MODE;
  } else if (overviewMode) {
    return SPECTACLE_MODES.OVERVIEW_MODE;
  } else if (printMode) {
    return SPECTACLE_MODES.PRINT_MODE;
  } else if (exportMode) {
    return SPECTACLE_MODES.EXPORT_MODE;
  }

  return SPECTACLE_MODES.DEFAULT_MODE;
}

export default useModes;