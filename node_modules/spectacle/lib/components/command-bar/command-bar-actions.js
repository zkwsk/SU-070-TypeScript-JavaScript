var _spectacleModeDisplay;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { KEYBOARD_SHORTCUTS_IDS, SPECTACLE_MODES } from '../../utils/constants';
import useModes from '../../hooks/use-modes';
/**
 * Kbar default actions, those that do not depend on dynamic logic, can be added here.
 * To register actions dynamically use 'useRegisterActions' and make sure the action
 * is registed within the KBarProvider.
 * @see https://kbar.vercel.app/docs/concepts/actions
 * Kbar action shortcuts dont seem to support all keybindings. If you need to utilize
 * keybindings that are not supported you'll have to implement the keybinding seperately.
 * @see useMousetrap
 * To display keybindings that are not supported in the Kbar results, please use
 * KEYBOARD_SHORTCUTS instead of Kbar actions 'shortcut' property.
 * @see CommandBarResults getShortcutKeys
 */

var spectacleModeDisplay = (_spectacleModeDisplay = {}, _defineProperty(_spectacleModeDisplay, SPECTACLE_MODES.DEFAULT_MODE, 'Default Mode'), _defineProperty(_spectacleModeDisplay, SPECTACLE_MODES.PRESENTER_MODE, 'Presenter Mode'), _defineProperty(_spectacleModeDisplay, SPECTACLE_MODES.OVERVIEW_MODE, 'Overview Mode'), _defineProperty(_spectacleModeDisplay, SPECTACLE_MODES.PRINT_MODE, 'Print Mode'), _defineProperty(_spectacleModeDisplay, SPECTACLE_MODES.EXPORT_MODE, 'Export Mode'), _spectacleModeDisplay);

var getName = function getName(currentMode, mode) {
  var defaultMode = SPECTACLE_MODES.DEFAULT_MODE;
  return currentMode === mode ? "\u2190 Back to ".concat(spectacleModeDisplay[defaultMode]) : spectacleModeDisplay[mode];
};

var useCommandBarActions = function useCommandBarActions() {
  var _useModes = useModes(),
      toggleMode = _useModes.toggleMode,
      getCurrentMode = _useModes.getCurrentMode;

  var currentMode = getCurrentMode();
  return [{
    id: KEYBOARD_SHORTCUTS_IDS.PRESENTER_MODE,
    name: getName(currentMode, SPECTACLE_MODES.PRESENTER_MODE),
    keywords: 'presenter',
    perform: function perform() {
      return toggleMode({
        newMode: SPECTACLE_MODES.PRESENTER_MODE
      });
    },
    section: 'Mode'
  }, {
    id: KEYBOARD_SHORTCUTS_IDS.OVERVIEW_MODE,
    name: getName(currentMode, SPECTACLE_MODES.OVERVIEW_MODE),
    keywords: 'overview',
    perform: function perform() {
      return toggleMode({
        newMode: SPECTACLE_MODES.OVERVIEW_MODE
      });
    },
    section: 'Mode'
  }, {
    id: KEYBOARD_SHORTCUTS_IDS.PRINT_MODE,
    name: getName(currentMode, SPECTACLE_MODES.PRINT_MODE),
    keywords: 'export',
    perform: function perform() {
      return toggleMode({
        newMode: SPECTACLE_MODES.PRINT_MODE
      });
    },
    section: 'Mode'
  }, {
    id: KEYBOARD_SHORTCUTS_IDS.EXPORT_MODE,
    name: getName(currentMode, SPECTACLE_MODES.EXPORT_MODE),
    keywords: 'export',
    perform: function perform() {
      return toggleMode({
        newMode: SPECTACLE_MODES.EXPORT_MODE
      });
    },
    section: 'Mode'
  }];
};

export default useCommandBarActions;