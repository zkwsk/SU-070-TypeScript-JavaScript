var _excluded = ["color", "size"];

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { forwardRef, useContext, useEffect, useState, useCallback } from 'react';
import styled, { keyframes } from 'styled-components';
import { DeckContext } from './deck/deck';
import { ProgressContainer, Circle, PROGRESS_CIRCLE_BORDER_WIDTH, DEFAULT_PROGRESS_CIRCLE_WIDTH_INCLUDING_MARGIN } from './progress';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export var PacmanBase = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  top: ", "px;\n  left: ", "px;\n  height: ", "px;\n  width: ", "px;\n  transition: left 0.3s ease-in-out 0.2s;\n  transform: translate(-50%, -50%);\n"])), function (_ref) {
  var top = _ref.top;
  return top;
}, function (_ref2) {
  var left = _ref2.left;
  return left;
}, function (_ref3) {
  var pacmanSize = _ref3.pacmanSize;
  return pacmanSize;
}, function (_ref4) {
  var pacmanSize = _ref4.pacmanSize;
  return pacmanSize;
});
var pacmanTopFrames = keyframes(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  0% { transform: rotateZ(0deg) }\n  100% { transform: rotateZ(-30deg) }\n"])));
var pacmanBottomFrames = keyframes(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  0% { transform: rotateZ(0deg) }\n  100% { transform: rotateZ(30deg) }\n"]))); // NOTE: rotateZ is 0.1 to generate two different animation names (styled components deduplication)

var pacmanTopFramesAlternate = keyframes(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  0% { transform: rotateZ(0.1deg) }\n  100% { transform: rotateZ(-30deg) }\n"]))); // NOTE: rotateZ is 0.1 to generate two different animation names (styled components deduplication)

var pacmanBottomFramesAlternate = keyframes(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  0% { transform: rotateZ(0.1deg) }\n  100% { transform: rotateZ(30deg) }\n"])));
var PacmanBodyTop = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  height: ", "px;\n  width: ", "px;\n  background: ", ";\n  border-top-left-radius: ", "px;\n  border-top-right-radius: ", "px;\n  // NOTE: So the top and bottom always overlap when sizes are in decimals.\n  box-shadow: 0 0 0 0.5px ", ";\n  animation-name: ", ";\n  animation-duration: 0.12s;\n  animation-timing-function: linear;\n  animation-iteration-count: 10;\n  animation-direction: alternate;\n  animation-fill-mode: both;\n"])), function (_ref5) {
  var pacmanSize = _ref5.pacmanSize;
  return pacmanSize / 2;
}, function (_ref6) {
  var pacmanSize = _ref6.pacmanSize;
  return pacmanSize;
}, function (_ref7) {
  var color = _ref7.color;
  return color;
}, function (_ref8) {
  var pacmanSize = _ref8.pacmanSize;
  return pacmanSize / 2;
}, function (_ref9) {
  var pacmanSize = _ref9.pacmanSize;
  return pacmanSize / 2;
}, function (_ref10) {
  var color = _ref10.color;
  return color;
}, function (_ref11) {
  var alternate = _ref11.alternate;
  return alternate ? pacmanTopFrames : pacmanTopFramesAlternate;
});
var PacmanBodyBottom = styled(PacmanBodyTop)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  top: 50%;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n  border-bottom-left-radius: ", "px;\n  border-bottom-right-radius: ", "px;\n  animation-name: ", ";\n"])), function (_ref12) {
  var pacmanSize = _ref12.pacmanSize;
  return pacmanSize / 2;
}, function (_ref13) {
  var pacmanSize = _ref13.pacmanSize;
  return pacmanSize / 2;
}, function (_ref14) {
  var alternate = _ref14.alternate;
  return alternate ? pacmanBottomFrames : pacmanBottomFramesAlternate;
});
var DEFAULT_ANIMATED_PROGRESS_CIRCLE_SIZE = 7.5;
var AnimatedProgress = /*#__PURE__*/forwardRef(function (_ref15, ref) {
  var _ref15$color = _ref15.color,
      circleColor = _ref15$color === void 0 ? '#fff' : _ref15$color,
      _ref15$size = _ref15.size,
      circleSize = _ref15$size === void 0 ? DEFAULT_ANIMATED_PROGRESS_CIRCLE_SIZE : _ref15$size,
      props = _objectWithoutProperties(_ref15, _excluded);

  var _useContext = useContext(DeckContext),
      slideCount = _useContext.slideCount,
      skipTo = _useContext.skipTo,
      slideIndex = _useContext.activeView.slideIndex;

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      pacmanOffsetLeft = _useState2[0],
      setPacmanOffsetLeft = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      pacmanOffsetTop = _useState4[0],
      setPacmanOffsetTop = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      alternateAnimation = _useState6[0],
      setAlternateAnimation = _useState6[1];

  var _useState7 = useState(null),
      _useState8 = _slicedToArray(_useState7, 2),
      activeCircleNode = _useState8[0],
      setActiveCircleNode = _useState8[1];

  var activeCircleCallbackRef = useCallback(function (activeCircleNode) {
    setActiveCircleNode(activeCircleNode);
  }, []);
  useEffect(function () {
    if (activeCircleNode !== null && activeCircleNode !== void 0 && activeCircleNode.offsetParent) {
      var offsetLeft = activeCircleNode.offsetLeft,
          offsetTop = activeCircleNode.offsetTop;
      var halfOfCircleOccupiedSpace = circleSize / 2 + PROGRESS_CIRCLE_BORDER_WIDTH;
      setPacmanOffsetLeft(offsetLeft + halfOfCircleOccupiedSpace);
      setPacmanOffsetTop(offsetTop + halfOfCircleOccupiedSpace);
      setAlternateAnimation(function (alternateAnimation) {
        return !alternateAnimation;
      });
    } else {
      setPacmanOffsetLeft(null);
      setPacmanOffsetTop(null);
    }
  }, [circleSize, activeCircleNode]);
  var circleMargin = (DEFAULT_PROGRESS_CIRCLE_WIDTH_INCLUDING_MARGIN - DEFAULT_ANIMATED_PROGRESS_CIRCLE_SIZE - PROGRESS_CIRCLE_BORDER_WIDTH * 2) / 2;
  var pacmanColor = props.pacmanColor || circleColor;
  var pacmanSize = circleSize + PROGRESS_CIRCLE_BORDER_WIDTH + circleMargin * 2;
  return /*#__PURE__*/_jsxs(ProgressContainer, _objectSpread(_objectSpread({
    ref: ref,
    position: "relative"
  }, props), {}, {
    children: [typeof pacmanOffsetTop === 'number' && typeof pacmanOffsetLeft === 'number' && /*#__PURE__*/_jsxs(PacmanBase, {
      pacmanSize: pacmanSize,
      top: pacmanOffsetTop,
      left: pacmanOffsetLeft,
      children: [/*#__PURE__*/_jsx(PacmanBodyTop, {
        color: pacmanColor,
        pacmanSize: pacmanSize,
        alternate: alternateAnimation
      }), /*#__PURE__*/_jsx(PacmanBodyBottom, {
        color: pacmanColor,
        pacmanSize: pacmanSize,
        alternate: alternateAnimation
      })]
    }), Array(slideCount).fill(0).map(function (_, idx) {
      return /*#__PURE__*/_jsx(Circle, {
        ref: slideIndex === idx ? activeCircleCallbackRef : null,
        color: circleColor,
        active: false,
        size: circleSize,
        margin: circleMargin,
        onClick: function onClick() {
          return skipTo({
            slideIndex: idx,
            stepIndex: 0
          });
        },
        "data-testid": "animated-progress-circle"
      }, idx);
    })]
  }));
});
AnimatedProgress.displayName = 'AnimatedProgress';
export default AnimatedProgress;