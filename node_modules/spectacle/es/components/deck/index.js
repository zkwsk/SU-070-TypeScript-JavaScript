var _excluded = ["getCurrentMode", "toggleMode"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { Fragment } from 'react';
import DefaultDeck from './default-deck';
import PresenterMode from '../presenter-mode';
import PrintMode from '../print-mode';
import useMousetrap from '../../hooks/use-mousetrap';
import { KEYBOARD_SHORTCUTS, SPECTACLE_MODES } from '../../utils/constants';
import useModes from '../../hooks/use-modes';
import CommandBar from '../command-bar';
import { jsx as _jsx } from "react/jsx-runtime";

var View = function View(_ref) {
  var getCurrentMode = _ref.getCurrentMode,
      toggleMode = _ref.toggleMode,
      props = _objectWithoutProperties(_ref, _excluded);

  var mode = getCurrentMode();

  switch (mode) {
    case SPECTACLE_MODES.DEFAULT_MODE:
      return /*#__PURE__*/_jsx(DefaultDeck, _objectSpread(_objectSpread({}, props), {}, {
        toggleMode: toggleMode
      }));

    case SPECTACLE_MODES.PRESENTER_MODE:
      return /*#__PURE__*/_jsx(PresenterMode, _objectSpread({}, props));

    /**
     * Print mode and export mode are identical except for the theme
     * that is used. Print mode uses the print theme which is usually
     * monotone and export mode uses the default theme.
     */

    case SPECTACLE_MODES.PRINT_MODE:
      return /*#__PURE__*/_jsx(PrintMode, _objectSpread({}, props));

    case SPECTACLE_MODES.EXPORT_MODE:
      return /*#__PURE__*/_jsx(PrintMode, _objectSpread(_objectSpread({}, props), {}, {
        exportMode: true
      }));

    case SPECTACLE_MODES.OVERVIEW_MODE:
      return /*#__PURE__*/_jsx(DefaultDeck, _objectSpread({
        overviewMode: true,
        toggleMode: toggleMode
      }, props));

    default:
      return /*#__PURE__*/_jsx(Fragment, {});
  }
};

var SpectacleDeck = function SpectacleDeck(props) {
  var _useMousetrap;

  var _useModes = useModes(),
      toggleMode = _useModes.toggleMode,
      getCurrentMode = _useModes.getCurrentMode;

  useMousetrap((_useMousetrap = {}, _defineProperty(_useMousetrap, KEYBOARD_SHORTCUTS.PRESENTER_MODE, function (e) {
    return e && toggleMode({
      e: e,
      newMode: SPECTACLE_MODES.PRESENTER_MODE
    });
  }), _defineProperty(_useMousetrap, KEYBOARD_SHORTCUTS.PRINT_MODE, function (e) {
    return e && toggleMode({
      e: e,
      newMode: SPECTACLE_MODES.PRINT_MODE
    });
  }), _defineProperty(_useMousetrap, KEYBOARD_SHORTCUTS.EXPORT_MODE, function (e) {
    return e && toggleMode({
      e: e,
      newMode: SPECTACLE_MODES.EXPORT_MODE
    });
  }), _defineProperty(_useMousetrap, KEYBOARD_SHORTCUTS.OVERVIEW_MODE, function (e) {
    return e && toggleMode({
      e: e,
      newMode: SPECTACLE_MODES.OVERVIEW_MODE
    });
  }), _useMousetrap), []);
  return /*#__PURE__*/_jsx(CommandBar, {
    children: /*#__PURE__*/_jsx(View, _objectSpread({
      getCurrentMode: getCurrentMode,
      toggleMode: toggleMode
    }, props))
  });
};

export default SpectacleDeck;