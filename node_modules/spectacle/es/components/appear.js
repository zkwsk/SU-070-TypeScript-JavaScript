function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import PropTypes from 'prop-types';
import { animated, useSpring } from 'react-spring';
import { useSteps } from '../hooks/use-steps';
import { SlideContext } from './slide/slide';

function SteppedComponent(_ref) {
  var id = _ref.id,
      className = _ref.className,
      childrenOrRenderFunction = _ref.children,
      _ref$tagName = _ref.tagName,
      tagName = _ref$tagName === void 0 ? 'div' : _ref$tagName,
      priority = _ref.priority,
      stepIndex = _ref.stepIndex,
      _ref$numSteps = _ref.numSteps,
      numSteps = _ref$numSteps === void 0 ? 1 : _ref$numSteps,
      _ref$alwaysAppearActi = _ref.alwaysAppearActive,
      alwaysAppearActive = _ref$alwaysAppearActi === void 0 ? false : _ref$alwaysAppearActi,
      _ref$activeStyle = _ref.activeStyle,
      activeStyle = _ref$activeStyle === void 0 ? {
    opacity: '1'
  } : _ref$activeStyle,
      _ref$inactiveStyle = _ref.inactiveStyle,
      inactiveStyle = _ref$inactiveStyle === void 0 ? {
    opacity: '0'
  } : _ref$inactiveStyle;

  var _React$useContext = React.useContext(SlideContext),
      immediate = _React$useContext.immediate;

  var _useSteps = useSteps(numSteps, {
    id: id,
    priority: priority,
    stepIndex: stepIndex
  }),
      isActive = _useSteps.isActive,
      step = _useSteps.step,
      placeholder = _useSteps.placeholder;

  var AnimatedEl = animated[tagName];
  var children;

  if (typeof childrenOrRenderFunction === 'function') {
    children = childrenOrRenderFunction(step, isActive);
  } else {
    children = childrenOrRenderFunction;
  }

  var springStyle = useSpring({
    to: isActive ? activeStyle : inactiveStyle,
    immediate: immediate
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, placeholder, /*#__PURE__*/React.createElement(AnimatedEl, {
    style: alwaysAppearActive ? activeStyle : springStyle,
    className: className
  }, children));
}

SteppedComponent.propTypes = {
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  className: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
  tagName: PropTypes.string,
  priority: PropTypes.number,
  stepIndex: PropTypes.number,
  numSteps: PropTypes.number,
  alwaysAppearActive: PropTypes.bool,
  activeStyle: PropTypes.object,
  inactiveStyle: PropTypes.object
};
export function Appear(_ref2) {
  var children = _ref2.children,
      restProps = _objectWithoutProperties(_ref2, ["children"]);

  return /*#__PURE__*/React.createElement(SteppedComponent, _extends({}, restProps, {
    numSteps: 1
  }), children);
}
Appear.propTypes = {
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  priority: PropTypes.number,
  stepIndex: PropTypes.number,
  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
  className: PropTypes.string,
  tagName: PropTypes.string,
  activeStyle: PropTypes.object,
  inactiveStyle: PropTypes.object
};
export function Stepper(_ref3) {
  var values = _ref3.values,
      renderFn = _ref3.render,
      renderChildrenFn = _ref3.children,
      _ref3$alwaysVisible = _ref3.alwaysVisible,
      alwaysVisible = _ref3$alwaysVisible === void 0 ? false : _ref3$alwaysVisible,
      activeStyle = _ref3.activeStyle,
      inactiveStyle = _ref3.inactiveStyle,
      restProps = _objectWithoutProperties(_ref3, ["values", "render", "children", "alwaysVisible", "activeStyle", "inactiveStyle"]);

  if (renderFn !== undefined && renderChildrenFn !== undefined) {
    throw new Error('<Stepper> component specified both `render` prop and a render function as its `children`.');
  }

  return /*#__PURE__*/React.createElement(SteppedComponent, _extends({}, restProps, {
    numSteps: values.length,
    alwaysAppearActive: alwaysVisible
  }), function (step, isActive) {
    return (renderFn || renderChildrenFn)(values[step], step, isActive);
  });
}
Stepper.propTypes = {
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  priority: PropTypes.number,
  stepIndex: PropTypes.number,
  render: PropTypes.func,
  children: PropTypes.func,
  className: PropTypes.string,
  tagName: PropTypes.string,
  values: PropTypes.arrayOf(PropTypes.any).isRequired,
  alwaysVisible: PropTypes.bool,
  activeStyle: PropTypes.object,
  inactiveStyle: PropTypes.object
};